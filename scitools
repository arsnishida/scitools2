#!/usr/bin/perl

# INITIALIZE LOCATION
BEGIN {
	use FindBin '$RealBin';
	push @INC, $RealBin;
}

# VERSION
$version = "2.0";


# LOAD MODULES
use Cwd;
use Getopt::Std; %opt = ();
use sci_utils::general;
use Exporter "import";

# LOAD DEFAULTS
$SCITOOLS_DEFAULTS = "$RealBin/scitools.cfg";
if (-e "$ENV{'HOME'}/.scitools.cfg") {
	$SCITOOLS_DEFAULTS = "$ENV{'HOME'}/.scitools.cfg";
} elsif (-e "$ENV{'HOME'}/scitools.cfg") {
	$SCITOOLS_DEFAULTS = "$ENV{'HOME'}/scitools.cfg";
} elsif ($ARGV[0] =~ /\.cfg$/) {
	# special config specification as first argument - advanced use only
	$SCITOOLS_DEFAULTS = shift(@ARGV);
	print STDERR "INFO: Special config file detected as first argument. ($ARGV[0])\n";
}
load_defaults($SCITOOLS_DEFAULTS,$RealBin);

# LOAD COMMANDS DIRECTLY FROM MODULE FILES
opendir CMDS, "$RealBin/sci_commands" || die "ERROR: Cannot locate the commands directory.\nERROR: It should be present in the same directory as the scitools executable: $RealBin\n";
while ($command_module_name = readdir(CMDS)) {
	if ($command_module_name !~ /(^\.|empty_module|test)/) {
		if ($command_module_name =~ /\.pm$/) { # exceptions -> do not show as available commands
			$command_module_name =~ s/\.pm$//;
			$COMMAND_NAMES{$command_module_name} = "pm";
		} elsif ($command_module_name =~ /\.py$/) { # python commands
			$command_module_name =~ s/\.py$//;
			$COMMAND_NAMES{$command_module_name} = "py";
		} elsif ($command_module_name =~ /\.r$/i) { # R commands
			$command_module_name =~ s/\.(r|R)$//;
			$COMMAND_NAMES{$command_module_name} = "r";
		}
	}
} closedir CMDS;

# LOAD ALIASES (optional for each command)
load_aliases();

# DIE MESSAGE
$die = "
scitools [command] [options] [arguments]

Version: $version
    adeylab.org & github.com/adeylab

scitools is a set of commands for general processing of single-
cell combinatorial indexing data. It is predominantly a wrapper
for generating R or other scripts that will be stored and executed.

scitools commands are typically in the form of [class]-[operation].

run 'scitools list' to print out a list of commands and descriptions.
To list a subset of commands include an additional argument with the
search term, e.g. 'scitools list fastq'\n\n";

# PULL COMMAND
if (defined $ARGV[0]) {
	
	if ($ARGV[0] =~ /^list$/) {
		
		load_descriptions();
		$die .= "   Command:             Description:\n\n";
		foreach $command_module_name (sort {$a cmp $b} keys %COMMAND_NAMES) {
			if (!defined $ARGV[1] || $command_module_name =~ /$ARGV[1]/i) {
				$list_command = sprintf("%-20s", $command_module_name);
				$list_command =~ s/_/-/g;
				if (defined $COMMAND_DESCRIPTOR{$command_module_name}) {
					$die .= "   $list_command $COMMAND_DESCRIPTOR{$command_module_name}\n";
				} else {
					$die .= "   $list_command WARNING: No description listed.\n";
				}
			}
		}
		die "$die\n";
		
	} else {
		
		$called_command = (shift(@ARGV));
		$called_command =~ s/-/_/g;
		
		if (defined $COMMAND_ALIAS{$called_command}) {
			$command = $COMMAND_ALIAS{$called_command};
		} elsif (defined $COMMAND_ALIAS{lc($called_command)}) {
			$command = $COMMAND_ALIAS{lc($called_command)};
		} else {$command = $called_command};
		if (!defined $COMMAND_NAMES{$command} && defined $COMMAND_NAMES{lc($command)}) {
			$command = lc($command);
		}
		if (defined $COMMAND_NAMES{$command}) {
		
			if (defined $IS_DEV{$command}) {
				print STDERR "\nWARNING: Command $command is considered to be in development.\n";
			}
			if ($COMMAND_NAMES{$command} =~ /pm/) {
				require "sci_commands/$command.pm";
				import "sci_commands::$command", "$command";
				if ($command eq "defaults") {push @ARGV, $SCITOOLS_DEFAULTS};
				\&$command(@ARGV);
			} elsif ($COMMAND_NAMES{$command} =~ /py/) {
				$args = join(" ", @ARGV);
				system("$Pscript $RealBin/sci_commands/$command.py $args");
			} elsif ($COMMAND_NAMES{$command} =~ /r/) {
				$args = join(" ", @ARGV);
				system("$Rscript $RealBin/sci_commands/$command.r $args");
			}
		} else {
			$command =~ s/_/-/g;
			die "ERROR: There is no command '$command', verify the command call name.\n$die";
		}
	}
} else {
	die $die;
}

# SUBROUTINES
sub load_defaults {
	# Some global ones that are not configured
	$color_mapping = "none";
	$ref_shortcuts = "";
	$log_check = "F";
	@BASES = ("A", "C", "G", "T", "N");
	%REF;
	if (-e "$_[0]") {
		open DEF, "$_[0]";
		while ($def = <DEF>) {
			if ($def !~ /^#/) {
				chomp $def;
				($var,$val) = split(/=/, $def);
				if ($var =~ /_ref$/) {
					$refID = $var; $refID =~ s/_ref$//;
					$REF{$refID} = $val;
					$ref_shortcuts .= "\t$refID = $val\n";
				} else { # software calls
					if ($var eq "gzip") {$gzip = $val}
					elsif ($var eq "zcat") {$zcat = $val}
					elsif ($var eq "bwa") {$bwa = $val}
					elsif ($var eq "samtools") {$samtools = $val}
					elsif ($var eq "scitools") {$scitools = $val}
					elsif ($var eq "macs2") {$macs2 = $val}
					elsif ($var eq "bedtools") {$bedtools = $val}
					elsif ($var eq "Rscript") {$Rscript = $val}
					elsif ($var eq "Pscript") {$Pscript = $val}
					elsif ($var eq "bowtie2") {$bowtie2 = $val}
					elsif ($var eq "bismark") {$bismark = $val}
					elsif ($var eq "snap_aligner") {$snap_aligner = $val};
				}
			}
		} close DEF;
	}
	# Load vars that need to be specified for functionality if they are not found in the config file
	if (!defined $gzip) {$gzip = "gzip"};
	if (!defined $zcat) {$zcat = "zcat"};
	if (!defined $bwa) {$bwa = "bwa"};
	if (!defined $samtools) {$samtools = "samtools"};
	if (!defined $scitools) {$scitools = "scitools"};
	if (!defined $macs2) {$macs2 = "macs2"};
	if (!defined $bedtools) {$bedtools = "bedtools"};
	if (!defined $Rscript) {$Rscript = "Rscript"};
	if (!defined $Pscript) {$Pscript = "python"};
	if (!defined $bowtie2) {$bowtie2 = "bowtie2"};
	if (!defined $bismark) {$bismark = "bismark"};
}

sub load_aliases {
	
	# Alias structure:
	# The list of aliases MUST be all lower case and only use underscores (not dashes)
	# The command name that the alias refers to MUST be the EXACT command name,
	# meaning the name of the package / perl module / python script / etc...
	
	# Annotation Commands
	foreach $alias ("annot_make", "make_annot") {$COMMAND_ALIAS{$alias} = "annot_make"};

}

sub load_descriptions {
	
	# Command Decription Structure:
	# The call must be the EXACT match to the command file / package / etc...
	# Provide a brief description of its function
	
	# Annotation Commands
	$COMMAND_DESCRIPTOR{"annot_make"} = "Make annotations from a design file.";

}
